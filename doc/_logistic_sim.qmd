---
editor:
    render-on-save: true
bibliography: references.bib
csl: ieee.csl
---

## Logistic growth simulation {#sec-logistic}

In this section, we explain the simulations used to assess the validity of our
inference pipeline. Let us begin by assuming that, since the strains are grown
for two full days in the experiment, having left behind the exponential phase
for almost an entire day, a simple exponential growth of the form
$$
\frac{dn_i}{dt} = \lambda_i n_i,
$${#eq-logistic_expo}
where $n_i$ is the number of cells of strain $i$, and $\lambda_i$ is the
corresponding growth rate is not enough. Instead, we will assume that the cells
follow the logistic growth equation of the form
$$
\frac{dn_i}{dt} = \lambda_i n_i 
\left( 1 - \frac{\sum_{j=1}^{N}n_i}{\kappa}\right),
$${#eq-logistic_fn}
where $\kappa$ is the carrying capacity, and $N$ is the total number of strains
in the culture.

The inference method is based on the model that assumes that the time passed
between dilutions $\tau \approx 8$ generations, the change in frequency for a
mutant barcode can be approximated from cycle $t$ to the next cycle $t + 1$ as
$$
f_{t+1}^{(m)} = f_t^{(m)} \mathrm{e}^{(s^{(m)} - \bar{s}_t)\tau},
$${#eq-logistic_fitness_fn}
where $s^{(m)}$ is the relative fitness for strain $i$ compared to the ancestral
strain and $\bar{s}_t$ is the mean fitness of the population at cycle $t$. To
test this assumption, we implemented a numerical experiment following the
logistic growth model described in @eq-logistic_fn. @fig-SIX_logistic_growth_01
shows an example of the deterministic trajectories for 50 labeled neutral
lineages and 1000 lineages of interest. The upper red curve that dominates the
culture represents the unlabeled ancestral strain included in the experimental
design described in @sec-experiment.

![**Logistic growth simulation over single growth cycle**. The dashed line
represents the neutral lineages, with the upper curve being the unlabeled
neutral strain. Color curves represent the genotypes of interest colored by
growth rate relative to the neutral
lineage.](./figs/figSIX_logistic_growth_01){#fig-SIX_logistic_growth_01}

To simulate multiple growth-dilution cycles, we take the population composition
at the final time point and use it to initialize a new logistic growth
simulation. @fig-SIX_logistic_growth_02 shows the resulting number of cells at
the last time point of a cycle over multiple growth-dilution cycles for the
genotypes in @@fig-SIX_logistic_growth_01. We can see that the adaptive lineages
(blue curves) increase in abundance, while detrimental lineages (red curves)
decrease.

![**Growth-dilution cycles for logistic growth simulation**. Each point
represents the final number of cells after a growth cycle for each lineage.
Colors are the same as in
@fig-SIX_logistic_growth_01.](./figs/figSIX_logistic_growth_02){#fig-SIX_logistic_growth_02}

In @sec-fitness_model, we derive the functional form to infer the relative 
fitness of each lineage as
$$
\frac{1}{\tau}\ln \frac{f_{t+1}^{(b)}}{f_{t}^{(b)}} = (s^{(b)} - \bar{s}_t).
$${#eq-logistic_logfreq}
@fig-SIX_logistic_growth_03 shows the corresponding log frequency ratio curves
for the logistic growth simulation. The displacement of these curves with 
respect to the neutral lineages determines the ground truth relative fitness
value for these simulations.

![**Log frequency ratio for logistic growth simulations**. The relative distance
of the color curves from the black dashed line determines the relative fitness
of each linage.](./figs/figSIX_logistic_growth_03){#fig-SIX_logistic_growth_03}

To simulate the experimental noise, we add two types of noise:

1. Poisson noise between dilutions. For this, we take the final point of the
logistic growth simulation and sample a random Poisson number based on this
last point to set the initial condition for the next cycle.
2. Gaussian noise when performing the measurements. When translating the 
underlying population composition to the number of reads, we can add a custom 
amount of Gaussian noise.

@fig-SIX_logistic_growth_04 shows the frequency trajectories (left panels) and
log frequency ratios (right panels) for a noiseless simulation (upper panels) 
and a simulation with added noise (lower panels). The noiseless simulation is
used to determine the relative fitness for each of the lineages, which serves
as the ground truth to be compared with the resulting inference.

![**Logistic growth-dilution simulations with and without
noise**](./figs/figSIX_logistic_growth_04){#fig-SIX_logistic_growth_04}
  
### Simulation details

This section lists the parameters used to generate the synthetic data used
throughout the main text. All the code to reproduce every simulation and figure
in the paper can be found in [the GitHub
repository](https://github.com/mrazomej/bayesian_fitness/tree/master). Unless
stated otherwise, the simulations were initialized following these steps:

1. The initial number of cells were defined as:
- Ancestor lineage: `n_init` $\times$ `frac_anc`.
- Neutral lineages: $n_0^{(n)} \sim \text{Poisson} 
\left( 
    \texttt{n\_init} \times \frac{\texttt{frac\_neutral}}{\texttt{n\_neutral}} 
\right)$ 
- Mutant lineages: $n_0^{(m)} \sim \text{LogNormal} 
\left( 
    \mu = \log(\texttt{n\_init} \times \frac{\texttt{frac\_mut}}{\texttt{n\_mut}}),
    \sigma = 2 
\right)$ 

where

- `n_init` is the initial number of cells.
- `frac_anc` $\in [0, 1]$ is the initial fraction of the culture that is
ancestor.
- `frac_neutral` $\in [0, 1]$ is the initial fraction of the culture that is
barcoded neutral lineages.
- `frac_mut` $\in [0, 1]$ is the initial fraction of the culture that is
barcoded lineages whose relative fitness we want to infer--hereafter "mutat"
barcodes.
- `frac_anc` + `frac_neutral` + `frac_mut` = 1
- `n_neutral` is the number of unique neutral lineage barcodes.
- `n_mut` is the number of unique mutant barcodes.

2. The distribution of growth rates $\lambda$ were defined as
- Ancestor lineage \& neutral lineages: $\lambda_a =$ `λ_a`. See details below
for specific values for each simulation.
- Mutant lineages: $\lambda_m \sim 
\text{truncated}-\mathcal{N}(
    \mu =$ `λ_mut_mean`,
    $\sigma =$ `λ_bc_std`,
    $\text{truncation limits} =$ `λ_trunc`
$)$. See details below for specific values for each simulation.

#### Fig 2.

The following is a `README.md` file automatically generated when simulating the
data for Fig. 2 in the main text:

- File location [`link to
file`](https://github.com/mrazomej/bayesian_fitness/blob/master/code/processing/data001_logistic_250bc_01env_01rep/sim_data001.jl)
- Number of mutant barcodes
`n_mut = 225`
- Number of neutral barcodes
`n_neutral = 25`
- Ancestral strain growth rate
`λ_a = 1.0`
- Carrying capacity
`κ = 1.0e10`
- Number of generations
`n_gen = 8`
- Initial number of cells
`n_init = κ / (2^(n_gen)) = 3.90625e7`
- Initial fraction of culture that is ancestor
`frac_anc = 0.93`
- Initial fraction of culture that is neutrals
`frac_neutral = 0.02`
- Initial fraction of culture that is mutants
`frac_mut = 0.04999999999999995`
- Mutant fitness distribution mean
`λ_mut_mean = λ_a * 1.005 = 1.005`
- Mutant fitness distribution standard deviation to sample growth rates
`λ_mut_std = 0.1`
- Mutant fitness distribution truncation ranges for growth rates
`λ_trunc = [λ_a .* 0.9999, λ_a * 1.5] = [0.9999, 1.5]`
- Gaussian noise distribution standard deviation
`σ_lognormal = 0.3`

#### Fig 3.

The following is a `README.md` file automatically generated when simulating the
data for Fig. 3 in the main text:

- File location [`link to
file`](https://github.com/mrazomej/bayesian_fitness/blob/master/code/processing/data003_logistic_1000bc_03env_01rep/sim_multienv_data003.jl)
- Number of environments
`n_env = 3`
- Environment transitions
`env_idx = [1, 2, 3, 1, 2, 3]`
- Number of mutant barcodes
`n_mut = 900`
- Number of neutral barcodes
`n_neutral = 100`
- Ancestral strain growth rate on each environment
`λ_a = [1.0, 2.0, 0.5]`
- Carrying capacity
`κ = 1.0e10`
- Number of generations
`n_gen = 8`
- Initial number of cells
`n_init = κ / (2^(n_gen)) = 3.90625e7`
- Initial fraction of culture that is ancestor
`frac_anc = 0.93`
- Initial fraction of culture that is neutrals
`frac_neutral = 0.02`
- Initial fraction of culture that is mutants
`frac_mut = 0.04999999999999995`
- Mutant fitness distribution mean
`λ_mut_mean = λ_a * 1.005 = [1.005, 2.01, 0.5025]
- Mutant fitness distribution standard deviation to sample growth rates
`λ_mut_std = 0.1`
- Mutant fitness distribution truncation ranges for growth rates
`λ_trunc = [λ_a .* 0.9995, λ_a .* 1.5] = [[[0.995, 1.99, 0.4975]], [[1.5, 3.0, 0.75]]]`
- Gaussian noise distribution standard deviation
`σ_lognormal = 0.125`

The variable `env_idx` lists the order of the environment cycles used in the
simulation. In this case, transitions were of the form `1 -> 2`, `2 -> 3`, and
`3 -> 1`.

#### Fig 4.

The following is a `README.md` file automatically generated when simulating the
data for Fig. 4 in the main text:

- File location [`link to
file`](https://github.com/mrazomej/bayesian_fitness/blob/master/code/processing/data002_logistic_1000bc_01env_02rep/sim_hierarchical_data002.jl)
- Number of experimental replicates
`n_data = 2`
- Number of mutant barcodes
`n_mut = 900`
- Number of neutral barcodes
`n_neutral = 100`
- Ancestral strain growth rate
`λ_a = 1.0`
- Carrying capacity
`κ = 1.0e10`
- Number of generations
`n_gen = 8`
- Initial number of cells
`n_init = κ / (2^(n_gen)) = 3.90625e7`
- Initial fraction of culture that is ancestor
`frac_anc = 0.93`
- Initial fraction of culture that is neutrals
`frac_neutral = 0.02`
- Initial fraction of culture that is mutants
`frac_mut = 0.04999999999999995`
- Mutant fitness distribution mean
`λ_bc_mean = λ_a * 1.005 = 1.005`
- Mutant fitness distribution standard deviation to sample growth rates
`λ_bc_std = 0.1`
- Mutant fitness distribution truncation ranges for growth rates
`λ_trunc = [λ_a .* 0.9999, λ_a * 1.5] = [0.9999, 1.5]`
- Gaussian noise distribution standard deviation
`σ_lognormal = 0.3`
- Standard deviation for between-experiment fitness distribution variability
`σ_exp = 0.015`

The variable `σ_exp` defines the variance used to sample the variability between
simulated experimental replicates. In other words, given a "hyper-fitness" value
$\lambda$, for each experimental replicate, the growth rate was defined as
$\lambda_j \sim \mathcal{N}(\lambda,$ `σ_exp` $)$.

#### Fig 6.

The following is a `README.md` file automatically generated when simulating the
data for Fig. 6 in the main text:

- File location [`link to
file`](https://github.com/mrazomej/bayesian_fitness/blob/master/code/processing/data007_logistic_hierarchicalgenotype_1000bc_01env_01rep/sim_data007.jl)
- Number of mutant barcodes
`n_mut = 900`
- Number of neutral barcodes
`n_neutral = 100`
- Ancestral strain growth rate
`λ_a = 1.0`
- Carrying capacity
`κ = 1.0e10`
- Number of generations
`n_gen = 8`
- Initial number of cells
`n_init = κ / (2^(n_gen)) = 3.90625e7`
- Initial fraction of culture that is ancestor
`frac_anc = 0.93`
- Initial fraction of culture that is neutrals
`frac_neutral = 0.02`
- Initial fraction of culture that is mutants
`frac_mut = 0.04999999999999995`
- Mutant fitness distribution mean
`λ_bc_mean = λ_a * 1.005 = 1.005`
- Mutant fitness distribution standard deviation to sample growth rates
`λ_bc_std = 0.1`
- Mutant fitness distribution truncation ranges for growth rates
`λ_trunc = [λ_a .* 0.9999, λ_a * 1.5] = [0.9999, 1.5]`
- Gaussian noise distribution standard deviation
`σ_lognormal = 0.3`
- Number of unique genotypes
`n_geno = Int64(n_mut / 10) = 90`

The variable `n_geno` defines the number of unique genotypes in the simulation.
In this simulation, we aimed to have ten unique barcodes on average for each
genotype. The actual number of genotypes per barcode was sampled from a
multinomial distribution with probability `1 / n_geno` for each genotype.